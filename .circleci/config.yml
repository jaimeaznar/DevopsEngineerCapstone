version: 2.1

commands:    
    destroy_environment:
        description: Destroy cloudformation
        steps:
          - run:
              name: Destroy environments
              when: on_fail
              command: |
                  aws cloudformation delete-stack --stack-name ${ENVIRONMENT_NAME}-eks-network

jobs:
  test-build:
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # run build
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install

      # run lint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
  
  upload-docker:
    docker:
      - image: circleci/golang:1.15

    working_directory: ~/repo

    steps:
      - checkout

      - setup_remote_docker:
          version: 19.03.13

      - run:
          name: Build docker container
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME .
            docker image ls

      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure EKS network exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/network-parameters.json
     
      - destroy_environment
  
  cleanup:
        docker:
        - image: amazon/aws-cli
        steps:
        - checkout
        - run:
            name: Delete Stack to avoid costs
            command: |           
                if
                aws cloudformation delete-stack --stack-name ${ENVIRONMENT_NAME}-eks-network
                echo "=======================Delete Confirmed========================"
                else
                echo "=======================Didn't delete========================"            
                fi
workflows:
  default:
    jobs:
      - test-build
      - upload-docker:
          requires:
            - test-build
      - deploy-infrastructure:
          requires:
            - test-build
      - cleanup:
          requires:
            - deploy-infrastructure